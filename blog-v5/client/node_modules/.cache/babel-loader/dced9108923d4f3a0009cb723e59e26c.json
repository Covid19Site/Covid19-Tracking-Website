{"ast":null,"code":"import axios from \"axios\";\nimport { CREATE_POST, GET_POST, GET_POSTS, UPDATE_POST, DELETE_POST, TOGGLE_POSTS_LOADING, TOGGLE_POST_LOADING, RESET_POST } from \"./types\";\nimport { setErrors, clearErrors } from \"./errorActions\";\nexport const createComment = (postData, history) => dispatch => {\n  dispatch(togglePostLoading());\n  axios.post(\"/api/posts/create\", postData).then(res => {\n    console.log(res);\n    dispatch({\n      type: CREATE_POST,\n      payload: res.data\n    });\n    dispatch(togglePostLoading());\n    history.push(\"/blog\");\n  }).catch(err => {\n    // console.log(err)\n    dispatch(setErrors(err.response.data));\n    dispatch(togglePostLoading());\n  });\n};\nexport const createPost = (postData, history) => dispatch => {\n  dispatch(togglePostLoading());\n  axios.post(\"/api/posts/create\", postData).then(res => {\n    console.log(res);\n    dispatch({\n      type: CREATE_POST,\n      payload: res.data\n    });\n    dispatch(togglePostLoading());\n    history.push(\"/blog\");\n  }).catch(err => {\n    // console.log(err)\n    dispatch(setErrors(err.response.data));\n    dispatch(togglePostLoading());\n  });\n};\nexport const getPostByID = id => dispatch => {\n  dispatch(togglePostLoading());\n  axios.get(\"/api/posts/post/\".concat(id)).then(res => {\n    dispatch({\n      type: GET_POST,\n      payload: res.data\n    });\n    dispatch(clearErrors());\n    dispatch(togglePostLoading());\n  }).catch(err => {\n    dispatch(setErrors(err.response.data));\n    dispatch(togglePostLoading());\n  });\n};\nexport const getPostsByAuthor = author => dispatch => {\n  dispatch(togglePostsLoading());\n  axios.get(\"/api/posts/author/\".concat(author)).then(res => {\n    dispatch({\n      type: GET_POSTS,\n      payload: res.data\n    });\n    dispatch(togglePostsLoading());\n  }).catch(err => {\n    dispatch(setErrors(err.response.data));\n    dispatch(togglePostsLoading());\n  });\n};\nexport const getPosts = () => dispatch => {\n  dispatch(togglePostsLoading());\n  axios.get(\"/api/posts/\").then(res => {\n    console.log(res);\n    dispatch({\n      type: GET_POSTS,\n      payload: res.data\n    });\n    dispatch(clearErrors());\n    dispatch(togglePostsLoading());\n  }).catch(err => {\n    dispatch(setErrors(err.response.data));\n    dispatch(togglePostsLoading());\n  });\n};\nexport const updatePost = (id, postData, history) => dispatch => {\n  dispatch(togglePostLoading());\n  axios.patch(\"/api/posts/update/\".concat(id), postData).then(res => {\n    dispatch({\n      type: UPDATE_POST,\n      payload: res.data\n    });\n    dispatch(togglePostLoading());\n    history.push(\"/blog/post/\".concat(res.data._id));\n  }).catch(err => {\n    dispatch(setErrors(err.response.data));\n    dispatch(togglePostLoading());\n  });\n};\nexport const deletePost = (id, history) => dispatch => {\n  dispatch(togglePostLoading());\n  axios.delete(\"/api/posts/delete/\".concat(id)).then(res => {\n    dispatch({\n      type: DELETE_POST,\n      payload: id\n    });\n    dispatch(togglePostLoading());\n    history.push(\"/blog\");\n  }).catch(err => {\n    dispatch(setErrors(err.response.data));\n    dispatch(togglePostLoading());\n  });\n};\nexport const resetPost = () => {\n  return {\n    type: RESET_POST\n  };\n};\nexport const togglePostLoading = () => {\n  return {\n    type: TOGGLE_POST_LOADING\n  };\n};\nexport const togglePostsLoading = () => {\n  return {\n    type: TOGGLE_POSTS_LOADING\n  };\n};","map":{"version":3,"sources":["/Users/mac/Documents/NEU /self-project1/covid/susan/v5/v5/client/src/actions/postActions.js"],"names":["axios","CREATE_POST","GET_POST","GET_POSTS","UPDATE_POST","DELETE_POST","TOGGLE_POSTS_LOADING","TOGGLE_POST_LOADING","RESET_POST","setErrors","clearErrors","createComment","postData","history","dispatch","togglePostLoading","post","then","res","console","log","type","payload","data","push","catch","err","response","createPost","getPostByID","id","get","getPostsByAuthor","author","togglePostsLoading","getPosts","updatePost","patch","_id","deletePost","delete","resetPost"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport {\n   CREATE_POST,\n   GET_POST,\n   GET_POSTS,\n   UPDATE_POST,\n   DELETE_POST,\n   TOGGLE_POSTS_LOADING,\n   TOGGLE_POST_LOADING,\n   RESET_POST\n} from \"./types\";\n\nimport { setErrors, clearErrors } from \"./errorActions\";\n\nexport const createComment = (postData, history) => dispatch => {\n   dispatch(togglePostLoading());\n   axios\n   .post(\"/api/posts/create\", postData)\n   .then(res => {\n      console.log(res)\n      dispatch({\n         type: CREATE_POST,\n         payload: res.data\n      });\n\n      dispatch(togglePostLoading());\n      history.push(\"/blog\");\n   })\n   .catch(err => {\n      // console.log(err)\n      dispatch(setErrors(err.response.data));\n      dispatch(togglePostLoading());\n   });\n};\n\nexport const createPost = (postData, history) => dispatch => {\n   dispatch(togglePostLoading());\n   axios\n      .post(\"/api/posts/create\", postData)\n      .then(res => {\n         console.log(res)\n         dispatch({\n            type: CREATE_POST,\n            payload: res.data\n         });\n\n         dispatch(togglePostLoading());\n         history.push(\"/blog\");\n      })\n      .catch(err => {\n         // console.log(err)\n         dispatch(setErrors(err.response.data));\n         dispatch(togglePostLoading());\n      });\n};\n\nexport const getPostByID = id => dispatch => {\n   dispatch(togglePostLoading());\n   axios\n      .get(`/api/posts/post/${id}`)\n      .then(res => {\n         dispatch({\n            type: GET_POST,\n            payload: res.data\n         });\n         dispatch(clearErrors());\n         dispatch(togglePostLoading());\n      })\n\n      .catch(err => {\n         dispatch(setErrors(err.response.data));\n         dispatch(togglePostLoading());\n      });\n};\n\nexport const getPostsByAuthor = author => dispatch => {\n   dispatch(togglePostsLoading());\n   axios\n      .get(`/api/posts/author/${author}`)\n      .then(res => {\n         dispatch({\n            type: GET_POSTS,\n            payload: res.data\n         });\n         dispatch(togglePostsLoading());\n      })\n      .catch(err => {\n         dispatch(setErrors(err.response.data));\n         dispatch(togglePostsLoading());\n      });\n};\n\nexport const getPosts = () => dispatch => {\n   dispatch(togglePostsLoading());\n   axios\n      .get(`/api/posts/`)\n      .then(res => {\n         console.log(res)\n         dispatch({\n            type: GET_POSTS,\n            payload: res.data\n         });\n         dispatch(clearErrors());\n         dispatch(togglePostsLoading());\n      })\n      .catch(err => {\n         dispatch(setErrors(err.response.data));\n         dispatch(togglePostsLoading());\n      });\n};\n\nexport const updatePost = (id, postData, history) => dispatch => {\n   dispatch(togglePostLoading());\n   axios\n      .patch(`/api/posts/update/${id}`, postData)\n      .then(res => {\n         dispatch({\n            type: UPDATE_POST,\n            payload: res.data\n         });\n         dispatch(togglePostLoading());\n         history.push(`/blog/post/${res.data._id}`);\n      })\n      .catch(err => {\n         dispatch(setErrors(err.response.data));\n         dispatch(togglePostLoading());\n      });\n};\n\nexport const deletePost = (id, history) => dispatch => {\n   dispatch(togglePostLoading());\n   axios\n      .delete(`/api/posts/delete/${id}`)\n      .then(res => {\n         dispatch({\n            type: DELETE_POST,\n            payload: id\n         });\n         dispatch(togglePostLoading());\n         history.push(\"/blog\");\n      })\n      .catch(err => {\n         dispatch(setErrors(err.response.data));\n         dispatch(togglePostLoading());\n      });\n};\n\nexport const resetPost = () => {\n   return {\n      type: RESET_POST\n   };\n};\n\nexport const togglePostLoading = () => {\n   return {\n      type: TOGGLE_POST_LOADING\n   };\n};\n\nexport const togglePostsLoading = () => {\n   return {\n      type: TOGGLE_POSTS_LOADING\n   };\n};\n"]},"metadata":{},"sourceType":"module"}